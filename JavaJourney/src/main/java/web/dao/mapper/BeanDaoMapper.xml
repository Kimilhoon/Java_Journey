<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="web.dao.face.BeanDao">
	
	<select id="selectBeanTop" resultType="Bean">
<!-- 		SELECT * FROM ( -->
<!-- 			SELECT rowNum rNum, B.* FROM ( -->
<!-- 				SELECT  -->
<!-- 					b.beanNo, i.beanImgNo, beanName, origin, beanComm, beanInfo, beanPrice, businessNo, -->
<!-- 					beanOriginname, beanStoredname, beanImgSize, bs.gram, -->
<!-- 					(SELECT COUNT(br.revNo) FROM beanRev br WHERE br.beanNo = b.beanNo) AS reviewCount, -->
<!-- 					(SELECT TRUNC( avg(revStarPoint)) FROM beanRev br WHERE br.beanNo = b.beanNo ) AS avgRevStarPoint -->
<!-- 				FROM bean b -->
<!-- 				LEFT JOIN beanImg i ON b.beanImgNo = i.beanImgNo -->
<!-- 				LEFT JOIN beanSub bs ON b.beanNo = bs.beanNo -->
<!-- 				ORDER BY reviewCount DESC -->
<!-- 			) B -->
<!-- 		) -->
<!-- 		WHERE rNum &lt;= 3 -->
		
		SELECT 
			m.*, 
			n.beanno, n.BEANNAME, n.ORIGIN,  
			bi.BEANIMGNO, bi.BEANORIGINNAME, cupData.cupNoteNames
		FROM (
		    SELECT 
		        rownum rnum, b.beanno, revcnt.reviewCount, revcnt.avgRevStarPoint 
		    FROM (
		        SELECT 
		            a.beanno, a.reviewCount, a.avgRevStarPoint 
		        FROM (
		            SELECT 
		                qq.beanno,
		                COUNT(*) OVER (PARTITION BY qq.beanno) AS reviewCount,
		                ROUND(AVG(revstarpoint) OVER (PARTITION BY qq.beanno), 2) AS avgRevStarPoint 
		            FROM bean qq
		            INNER JOIN beanrev ww ON qq.beanno = ww.beanno
		        ) a
		        GROUP BY a.beanno, a.reviewCount, a.avgRevStarPoint
		        ORDER BY COUNT(*) DESC, avgRevStarPoint DESC
		    ) revcnt 
		    INNER JOIN bean b ON b.beanno = revcnt.beanno
		) m
		INNER JOIN bean n ON m.beanno = n.beanno
		INNER JOIN beanimg bi ON n.beanimgno = bi.beanimgno
		LEFT JOIN (
		    SELECT 
		        bt.beanno, 
		        LISTAGG(c.cupnotename, ', ') WITHIN GROUP (ORDER BY c.cupnoteno) AS cupNoteNames
		    FROM beantaste bt
		    INNER JOIN cupnote c ON bt.cupnoteno = c.cupnoteno
		    GROUP BY bt.beanno
		) cupData ON m.beanno = cupData.beanno
		WHERE rnum BETWEEN 1 AND 3
		ORDER BY rnum
	</select>
	
	<select id="selectBeanCount" resultType="Bean">
		SELECT count(beanNo) as beanCount FROM bean
	</select>
	
	<!-- /bean/best -->
	<!-- ====================================================================================================== -->

	<select id="selectCntAll" parameterType="hashmap" resultType="int">
		SELECT	count(*)
		FROM	bean b
		<if test='cupnote != null and cupnote != "N"'>
		LEFT JOIN beanTaste bt ON b.beanNo = bt.beanNo
    	LEFT JOIN cupNote c ON bt.cupNoteNo = c.cupNoteNo
    	</if>
		<where>
			<if test='cupnote != null and cupnote != "N"'>
			AND		c.cupNoteName = #{ cupnote }
			</if>
			<if test='keyword != null and keyword != "N"'>
			AND		upper(b.beanName) LIKE '%'||upper(#{keyword})||'%' 
			</if>
		</where>
	</select>
	
	
	<select id="selectAll" parameterType="hashmap" resultType="Bean">
		SELECT * FROM (
			SELECT rowNum rNum, B.*, i.beanOriginname FROM (
				SELECT 
					b.beanNo, b.beanImgNo, beanName, origin, 
					beanComm, beanPrice, businessNo, status,
					<if test='cupnote != "N"'>
					c.cupNoteNo, c.cupNoteName,
					</if>
					(SELECT COUNT(br.revNo) FROM beanrev br WHERE br.beanNo = b.beanNo) AS reviewCount,
					LISTAGG(c.cupnotename, ', ') WITHIN GROUP (ORDER BY c.cupnoteno) AS cupNoteNames
<!-- 					(SELECT LISTAGG(cupNoteName, ', ') WITHIN GROUP (ORDER BY cupNoteName) AS cupNoteNames -->
<!-- 						FROM ( -->
<!-- 							SELECT DISTINCT c.cupNoteName -->
<!-- 							FROM cupNote c -->
<!-- 							INNER JOIN beanTaste bt ON c.cupNoteNo = bt.cupNoteNo -->
<!-- 							WHERE bt.beanNo = b.beanNo -->
<!-- 						) -->
<!-- 					) AS cupNoteNames -->
<!-- 					(select count(*) from beanrevcomm where b.beanNo=#{beanNo}) as reviewCount -->
				FROM bean b
				LEFT JOIN beanTaste bt ON b.beanNo = bt.beanNo
				LEFT JOIN cupNote c ON bt.cupNoteNo = c.cupNoteNo
				<where>
				<if test='cupnote != "N"'>
				AND		c.cupNoteName = #{ cupnote }
				</if>
				<if test='keyword != "N"'>
				AND		upper(beanName) LIKE '%'||upper(#{keyword})||'%' 
				</if>
				</where>
				GROUP BY
					b.beanNo, b.beanImgNo, beanName, origin, 
					beanComm, beanPrice, businessNo, status
					<if test='cupnote != "N"'>
					, c.cupNoteNo, c.cupNoteName
					</if>
				ORDER BY b.beanNo DESC
			) B
				LEFT JOIN beanImg i ON B.beanImgNo = i.beanImgNo
		) bean
		WHERE rNum BETWEEN #{ paging.startNo } AND #{ paging.endNo }
	</select>  
	
	<!-- /bean/all -->
	<!-- ====================================================================================================== -->
	
	<select id="selectByBeanNo" parameterType="Bean" resultType="Bean">
		SELECT 
				b.beanNo, i.beanImgNo, beanName, origin, 
				beanComm, beanInfo, beanPrice, businessNo,
				beanOriginname, beanStoredname, beanImgSize,
				status
		FROM	bean b
		INNER JOIN beanImg i ON b.beanImgNo = i.beanImgNo
		<where>
		AND		b.beanNo = #{ beanNo }
		</where>
	</select>
	
	<select id="selectStarPoint" parameterType="Bean" resultType="BeanRev">
		SELECT TRUNC(avg (revStarPoint) ) AS avgRevStarPoint, beanNo
		FROM	beanRev
		<where>
		AND		beanNo = #{ beanNo }
		</where>
		GROUP BY beanNo
	</select>
	
	<select id="selectByUserId" parameterType="String" resultType="Member">
		SELECT	userNo
		FROM	member
		<where>
		AND		userId = #{ userId }
		</where>
	</select>
	
	<select id="selectAllRev" parameterType="Bean" resultType="BeanRev">
		SELECT
				revNo, b.beanNo, b.subNo, b.userNo, revCont, 
				revHit, revDate, revStarPoint,
				m.userNick
		FROM 	beanRev b
		LEFT JOIN member m ON b.userNo = m.userNo
		<where>
		AND		beanNo = ${ beanNo }
		</where>
	</select>

<!-- 	<insert id="insertWish" parameterType="BeanWish"> -->
<!-- 		<selectKey order="BEFORE" resultType="int" keyProperty="beanWishNo"> -->
<!-- 			SELECT beanWishNo_seq.nextval FROM dual -->
<!-- 		</selectKey> -->
<!-- 		INSERT INTO beanWish( beanWishNo, beanNo, userNo ) -->
<!-- 		VALUES ( #{ beanWishNo }, #{ beanNo }, #{ userNo } ) -->
<!-- 	</insert> -->

	<insert id="addWish" parameterType="map">
		<selectKey order="BEFORE" resultType="int" keyProperty="beanWishNo">
			SELECT beanWishNo_seq.nextval FROM dual
		</selectKey>
		INSERT INTO beanWish( beanWishNo, beanNo, userNo )
		VALUES ( #{ beanWishNo }, #{ beanNo }, #{ userNo } )
	</insert>
	
	<delete id="removeWish" parameterType="map">
		DELETE 	beanWish
		<where>
		AND		beanNo = #{ beanNo }
		AND		userNo = #{ userNo }
		</where>
	</delete>
	
	<select id="countUserWish" parameterType="map" resultType="int">
		SELECT COUNT(*) 
		FROM beanWish 
		WHERE beanNo = #{beanNo} AND userNo = #{userNo}
    </select>

	<!-- /bean/info -->
	<!-- ====================================================================================================== -->

	<select id="selectBeanByBeanNo" parameterType="Bean" resultType="Bean">
		SELECT
				beanno, beanname, origin, beanprice
		FROM 	bean
		<where>
		AND		beanNo = #{ beanNo }
		</where>
	</select>
	 
	<select id="selectMemberByUserId" parameterType="String" resultType="Member">
		SELECT
				userno, userid, userpw, usernick, 
				useremail, username, userphone, 
				userpostcode, useradd1, useradd2
		FROM 	member
		<where>
		AND		userId = #{ userId }
		</where>
	</select>
	
	<insert id="beanSubscribe" parameterType="BeanSub">
		<selectKey order="BEFORE" resultType="int" keyProperty="subNo">
			SELECT beanWishNo_seq.nextval FROM dual
		</selectKey>
		INSERT INTO beanSub ( subno, userno, beanno, gram, price, grind, substartdate, subenddate, subtime, nonsub )
		VALUES ( #{ subNo }, #{ userNo }, #{ beanNo }, #{ gram }, #{ price }, #{ grind }, SYSDATE, #{ subEndDate }, #{ subTime }, 'N' )
	</insert>
	
	<!-- /bean/sub -->
	<!-- ====================================================================================================== -->
	
	
	<!-- beanCompare -->
	<select id="selectAllBean" resultType="Bean">
		SELECT * FROM bean
	</select>
	
	<select id="selectBeanByBeanNoForCompare" resultType="Bean" parameterType="int">
		SELECT 
		    a.*,
		    bi.beanoriginname AS beanOriginName
		FROM 
		    (SELECT 
		         b.beanno AS beanNo,
		         b.beanname AS beanName,
		         b.origin AS origin,
		         b.beanprice AS beanPrice,
		         b.beanimgno AS beanImgNo,
		         LISTAGG(c.cupnotename, ', ') WITHIN GROUP (ORDER BY c.cupnoteno) AS cupNoteNames
		     FROM 
		         bean b
		     JOIN 
		         beantaste bt ON b.beanno = bt.beanno
		     JOIN 
		         cupnote c ON bt.cupnoteno = c.cupnoteno
	         <where>
	         	AND b.beanno = #{beanNo }
	         </where>
		     GROUP BY 
		         b.beanno, b.beanname, b.origin, b.beanprice, b.beanimgno
		    ) a
		JOIN 
		    beanimg bi ON a.beanImgNo = bi.beanimgno
	</select>

</mapper>