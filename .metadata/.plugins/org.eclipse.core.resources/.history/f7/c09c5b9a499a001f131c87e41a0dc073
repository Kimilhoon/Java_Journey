package file.view;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.net.http.HttpResponse;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.servlet.view.AbstractView;

import file.dto.FileTest;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class FileDownloadView extends AbstractView {
	
	@Autowired private ServletContext context;
	
	@Override
	protected void renderMergedOutputModel(
			
			Map<String, Object> model,
			HttpServletRequest request,
			HttpServletResponse response
			
			) throws Exception {
		
		log.info("파일 다운로드 응답 테스트");
		//----------------------------------------------------------------
		
		//HTML 응답 테스트
//		response.setContentType("text/html;charset=utf-8");
//		response.getWriter().append("<h1>응답 TEST</h1");
		
		//----------------------------------------------------------------
		
		//모델값 가져오기
		FileTest downFile = (FileTest) model.get("downFile");
		
		//파일이 저장된 폴더 (upload)
//		String path = request.getServletContext().getRealPath("upload");
		String path = context.getRealPath("upload");
		
		//업로드된 파일의 이름
		String filename = downFile.getStoredName();
		
		//실제 파일 객체
		File src = new File(path, filename);
		
		log.info("서버에 업로드된 파일 : {}", src);
		log.info("존재 여부 : {}", src.exists());
		//----------------------------------------------------------------
		
		//** HTTP 응답을 직접 구성해서 처리한다
		
		//** HTTP Message의 Response HEADER, BODY 를 설정한다
		//	-> HEADER : 응답 설정 속성
		//	-> BODY : src(파일)
		
		//** 필수 응답 헤더 속성
		//	Content-Type
		//	Content-Length
		//	CharacterEncdoing
		//	Content-Disposition
		//----------------------------------------------------------------
		
		//응답 데이터의 유형(Content Type)을 설정한다
		//	-> application/octet-stream : 모든 파일의 형식을 표현한다
		//	-> 브라우저는 해당 형식의 데이터를 응답받으면 다운로드 한다
		response.setContentType("application/octet-stream");
		
		//응답 데이터의 크기 설정
		//	-> 브라우저가 응답 데이터의 끝(EOF)을 알 수 있도록 한다
//		response.setContentLength( (int) src.length() );
		response.setContentLengthLong( src.length() );
		
		//응답 데이터의 인코딩 설정
		response.setCharacterEncoding("UTF-8");
		
		//브라우저가 다운로드할 파일의 이름 설정하기
		//	-> 응답 헤더는 띄어쓰기와 한글을 제대로 처리하지 못한다
		//	-> URL Encoding 을 이용하여 원본 형식을 유지하도록 만든다
		//	-> UTF-8 한글 인코딩도 유지된다
//		String outputName = downFile.getOriginName();
		String outputName = URLEncoder.encode(downFile.getOriginName(), "UTF-8");
		//URLEncoder가 인코딩을 하며 띄어쓰기를 +로 표시함, +를 띄어쓰기로 치환함!!!
		outputName = outputName.replace("+", "%20");
		response.setHeader("Content-Disposition", "attachment; filename=\"" + outputName + "\"");
//		response.setHeader("Content-Type", "application/octet-stream");
		//----------------------------------------------------------------
		
		//** 응답 메시지의 BODY영역 설정하기
		//	서버 File객체 (src) -> FileInputStream 입력 -> HTTP Response OutputStream 출력
		
		//서버의 파일 입력 스트림 객체
		FileInputStream in = new FileInputStream(src);
		
		//클라이언트의 응답 출력 스트림
		OutputStream out = response.getOutputStream();
		
		//in 스트림에서 out 스트림으로 복사
		FileCopyUtils.copy(in, out);
		
		
		
	}
	
}



















