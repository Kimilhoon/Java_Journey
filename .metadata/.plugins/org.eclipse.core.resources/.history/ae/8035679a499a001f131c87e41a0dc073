package ajax.controller;

import java.io.IOException;
import java.io.Writer;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import ajax.dto.ResultData;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/ajax")
public class AjaxController {
	
	// 1. 응답 출력 스트림으로 JSON Text를 직접 응답하기
	
	@RequestMapping("/test01")
	public void ajaxText01() {}
	
	@RequestMapping("/test01_ok")
	public void ajaxText01_ok( Writer out ) {
		
		try {
			out.append("{\"msg\": \"response data\"}");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	//----------------------------------------------------------
	
	// 2. @ResponseBody 를 이용하여 객체를 JSON Text로 응답하기
	//	ViewResolver 의 도움을 받지않고 컨트롤러 메소드에서 직접 응답을 출력하겠다는 설정이다
	
	//	컨트롤러 메소드의 return값을 응답데이터로 사용한다
	
	//** JSON Text 로 변환해서 처리해야 한다
	//	-> String 타입은 원본 데이터 그대로 응답할 수 있지미나
	//	객체(DTO, Map 등)타입은 응답 데이터로 사용할 수 없다
	//	-> Jackson Databind 라이브러리를 이용해야 JSON으로 변환한다
	
	//** Jackson 프로젝트
	//	자바 객체 <-> JSON Text 변환을 도와주는 라이브러리들의 모음
	
	//** Jackson Databind 라이브러리
	//	자바에서 스트림을 이용해 객체를 전송할 때 JSON Text로 데이터를 변환한다
	
	
//	@GetMapping("/test02")
//	public void test02() {}
//	
//	@GetMapping("/test02_ok")
//	@ResponseBody
//	public String ajaxText02_ok() {
//	
////		return "HIHI";
//		return "{\"data\": \"Apple\"}";
//	}
	
	@RequestMapping("/test02")
	public void ajaxTest02() {}

	@GetMapping("/test02_ok")
	@ResponseBody
	public ResultData ajaxTest02_ok() {
		
		// DTO를 @ResponseBody를 적용해 직접 응답 출력하기
		//	-> Jackson Databind 라이브러리가 자동으로 JSON Text로 변환한다
		return new ResultData("Banana",12345);
	}
	
	//----------------------------------------------------------
	
	// 3. JSON 응답을 생성하는 전용 jsonView 사용하기
	
	@RequestMapping("/test03")
	public void ajaxTest03() {}
	
	@RequestMapping("/test03_ok")
	public String ajaxTest03_ok( Model model ) {
		
		model.addAttribute("rd", new ResultData("Cherry", 123456));
		
		return "jsonView";
	}
	
	
	//----------------------------------------------------------
	
	// 4. AJAX의 응답으로 JSP응답(View)을 활용하기
	//	-> JSP를 통해 완성된 HTML코드를 응답데이터로 전달한다
	
	@RequestMapping("/test04")
	public void test04() {}
	
	@RequestMapping("/test04_ok")
	public void ajaxTest04_ok( Model model ) {
		
		model.addAttribute("rd", new ResultData("Durian", 12345));
		
	}
	
	
	
	
	
	
}





















