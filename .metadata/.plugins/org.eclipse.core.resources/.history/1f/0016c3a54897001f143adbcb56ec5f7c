package web.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;
import web.dto.Board;
import web.dto.Comment;
import web.dto.File;
import web.dto.FileParam;
import web.service.face.BoardService;

@Controller
@RequestMapping("/board")
@Slf4j
public class BoardController {
	
	@Autowired private BoardService boardService;
	
	@GetMapping("/list")
	public void list(Model model, String search) {
		
		if( search != null && !"".equals(search)  ) {
			
			Board board = new Board();
			board.setTitle(search);
			
			log.info("search : {}", search);
			log.info("listSSSS: {}", board);
			
			List<Board> list = boardService.searchList(board);
			
			model.addAttribute("list", list);
			return;
			
		}
		
		List<Board> list = boardService.list();
		
		log.info("list: {}", list);
		
		model.addAttribute("list", list);
		
	}
	
	@GetMapping("/view")
	public void view(@RequestParam int boardNo, Model model, HttpSession session) {
		
		Board board = boardService.view(boardNo);
		log.info("board: {}", board);
		
		File file = boardService.infoFile(boardNo);

		int recCnt = boardService.getRecommendCount(boardNo);
		
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		map.put("cnt", recCnt);
		
		List<Comment> commentList = boardService.getComment(boardNo);
		
		model.addAttribute("board", board);
		model.addAttribute("file", file);
		model.addAttribute("recCnt", map);
		model.addAttribute("comment", commentList);
		
	}
	
	@RequestMapping("/recommend")
	public void recommend(@RequestParam int boardNo, Model model, HttpSession session,HttpServletResponse resp) {
		
		String userid = (String) session.getAttribute("memberId");
		
		int rec = boardService.clickRec(userid, boardNo);
		
		if( rec > 0 ) {
			try {
				resp.getWriter().append("\"recommend\"");
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		} else {
			try {
				resp.getWriter().append("\"del_recommend\"");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
	}
	
	@GetMapping("/write")
	public void write() {}
	
	@PostMapping("/write")
	public String writeProc(Board param, HttpSession session, MultipartFile file) {
		
		FileParam fileparam = new FileParam();
		
		fileparam.setFile(file);
		
		param.setWriterId( (String) session.getAttribute("memberId") );
		param.setWriterNick( (String) session.getAttribute("memberNick") );
		log.info("{}",fileparam);
		
		if(file.isEmpty()) {
			boardService.writeBoard(param);
		} else {
			boardService.write(param, fileparam);
		}
		
		
		return "redirect:./list";
		
	}
	
	@RequestMapping("/download")
	public String download( Board board, Model model ) {
		
		int boardNo = board.getBoardNo();
		
		File file = boardService.infoFile( boardNo );
		
		model.addAttribute("downFile", file);
		
		return "downView";
		
	}
	
	@GetMapping("/update")
	public void boardUpdate( Board b, Model model ) {
		
		int boardNo = b.getBoardNo();
		
		Board board = boardService.getBoard(boardNo);
		File file = boardService.getFile(boardNo);
		
		model.addAttribute("board", board);
		model.addAttribute("file", file);
		
	}
	
	@PostMapping("/update")
	public String boardUpdateProc( Board board, MultipartFile file, Model model ) {
		
//		boolean isDelete = (boolean) model.getAttribute("clickDelete");
//		log.info("isDelete: {}", isDelete);
//		
//		if( isDelete ) {
//			boardService.deleteFile(board);
//		}
		
		FileParam fileparam = new FileParam();
		log.info("file: {}",file);
		fileparam.setFile(file);
		
		if(file.isEmpty()) {
			boardService.updateBoardNotfile(board);
		} else {
			boardService.updateBoard(board, fileparam);
		}
		
		return "redirect: ./view?boardNo=" + board.getBoardNo();
	}
	
	@RequestMapping("/delete")
	public String boardDelete(Board board) {
		
		boardService.deleteBoard(board);
		
		return "redirect: ./list";
	}
	
	@RequestMapping("/comment")
	public void comment(Comment comment, HttpSession session, HttpServletResponse resp) {
		
		String userId = (String) session.getAttribute("memberId");
		comment.setUserid(userId);
		
		boardService.writeComment(userId, comment);
		
		try {
			resp.getWriter().append("");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	@RequestMapping("/search")
	public String search(String search, Model model) {
		
		Board board = new Board();
		board.setTitle(search);
		
		log.info("search : {}", search);
		log.info("list: {}", board);
		
		List<Board> list = boardService.searchList(board);
		
		model.addAttribute("list", list);
		
		return "redirect: ./list";
	}
	
}
























