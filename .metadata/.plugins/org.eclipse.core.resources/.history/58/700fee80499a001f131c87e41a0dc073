package aop;

import javax.servlet.http.HttpServletRequest;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Component	//스프링 빈(컴포넌트)으로 등록하기, [ component-scan 에 패키지 등록 필요, <annotation-driven /> 태그 필요 ]
@Aspect		//AspectJ 의 관리를 받도록 설정하기
@Slf4j
public class LogAspect {
	
	//포인트컷 설정
//	public java.util.List<dept.dto.Dept>dept.service.impl.DeptServiceImpl.list()
	
//	@Pointcut(value = "")
//	@Pointcut("execution(public java.util.List<dept.dto.Dept>dept.service.impl.DeptServiceImpl.list())")
	@Pointcut("execution( * dept.service.impl.*ServiceImpl.*(..))")
	private static void logPointCut() {}
	
	
	//어드바이스 코드 작성
//	@Before(value = "")
//	@Before("logPointCut()")
	@After("logPointCut()")
	public void logPrint() {
//		log.info("!!! AOP 테스트 !!!");
	}
	
	//-------------------------------------------------------------
	
	//포인트컷 + 어드바이스 코드 작성
	@Before("execution( * dept.service.impl.*ServiceImpl.*(..))")
	public void logPirnt2() {
		log.info("@@@@@@@@ AOP 테스트 2 @@@@@@@@");
	}
	
	//-------------------------------------------------------------
	
//	@Before("execution(* *..controller..*.*(..))") //모든 컨트롤러의 모든 메소드
//	@Before("execution(* *..service..*.*(..))") //모든 서비스의 모든 메소드
	@Before("execution(* *..controller..*.*(..)) || execution(* *..service..*.*(..))")
	public void log() {
//		log.info("***** Controller AOP LOG *****");
//		log.info("***** Service AOP LOG *****");
//		log.info("***** Controller, Service AOP LOG *****");
		
	}
	
	@Before("execution(* *..controller..*.*(..)) || execution(* *..service..*.*(..))")
	public void logMessage( JoinPoint jp ) {
		
//		log.info("##### {}", jp);
//		log.info("##### {}", jp.getSignature());
		
		//-------------------------------------------------------------
		
		Signature sign = jp.getSignature();
		
//		log.info(">>>>> getName : {}", sign.getName());
//		log.info(">>>>> toString : {}", sign.toString());
//		log.info(">>>>> toShortString : {}", sign.toShortString());
//		log.info(">>>>> toLongString : {}", sign.toLongString());
		
	}
	
	//-------------------------------------------------------------
	
	@Around("execution(* *..controller..*.*(..))")
	public Object aroundTest(ProceedingJoinPoint pjp) {
		
		log.info("$$$$$ 수행 전, Before $$$$$");
		
		Object returnValue = null;
		
		try {
			
			//Aspact가 적용될 타겟 메소드(Target JoinPoint)를 실행한다
			returnValue = pjp.proceed();
			
		} catch (Throwable e) {
			e.printStackTrace();
			
//			log.info("$$$$$ 예외 발생 시, AfterThrowing $$$$$");
		}
		
//		log.info("$$$$$ 수행 후!!!, After $$$$$");
//		log.info("$$$$$ returnValue : {}", returnValue);
		
		if( returnValue != null ) {
//			log.info("$$$$$ 성공적인 리턴 발생 시, AfterReturning $$$$$");
		}
		
		return returnValue;
		
	}
	
	@Around("execution(* dept.service..*.*(..))")
	public Object primitiveAroundTest(ProceedingJoinPoint pjp) {
		
		Object obj = null;
		try {
			obj = pjp.proceed();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		
		return obj;
		
	}
	
	@Autowired HttpServletRequest req;
	@Before("bean(*Controller)")
	public void defaultControllerLog() {
		log.info("{} [{}]", req.getRequestURI(), req.getMethod() );
	}
	
	@Before("bean(*ServiceImpl)")
	public void defaultServiceLog(JoinPoint jp) {
		log.info("{}", jp.getSignature().toShortString());
	}
	
	
}























